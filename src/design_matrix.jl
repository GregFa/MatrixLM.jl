


"""
    mlmformula(ex)

    Capture and parse a formula expression for matrix linear model.
    
    The `@mlmformula` domain-specific language serves the purpose of facilitating table-to-matrix transformations.
    It is structured to be intuitive for users who have experience with other statistical software.
    An elementary formula in this language consists of individual terms. These terms may either be symbols that reference
    data columns or literal numbers `0` or `1`. They are combined by the operators `+`, `&`, and `*`. 
    To ensure correct parsing of the formula, the `@mlmformula`` macro needs to be invoked within parentheses. 
    This macro is built upon the `@formula` macro from the `StatsModels.jl` package.
    
    # Example
    ```julia
    julia> @mlmformula(1 + varA * VarB)
    1
    varA(unknown)
    VarB(unknown)
    varA(unknown) & VarB(unknown)
    ```
"""
macro mlmformula(ex)
    ex_string = "0 ~" * string(ex) 
    return @eval(@formula($(Meta.parse(ex_string))).rhs)
end

"""
    design_matrix(frml, df::DataFrame,cntrst::Dict{Symbol, AbstractContrasts})

    Returns the design matrix based on the formula terms and the data source.

    # Arguments 

    - `frml`: formula terms generated by the macro `@mlmformula`
    - `df`: dataframe containing the data source table
    - `cntrst`: dictionnary describing encoding method for categorical or ordinal variables, based on `StatsModels.jl`

---
    design_matrix(frml, df::DataFrame, cntrst::Vector)

    Returns the design matrix based on the formula terms and the data source.

    # Arguments 

    - `frml`: formula terms generated by the macro `@mlmformula`
    - `df`: dataframe containing the data source table
    - `cntrst`: A vector containing tuples of variable names and corresponding  encoding function.

---
    design_matrix(frml, df::DataFrame)

    Returns the default design matrix based on the formula terms and the data source, where
    all the categorical variables are dummy coded.

    # Arguments 

    - `frml`: formula terms generated by the macro `@mlmformula`
    - `df`: dataframe containing the data source table

"""
function design_matrix(frml, df::DataFrame, cntrst::Dict)
    sch = schema(frml, df, cntrst)
    vFrmlTerms = apply_schema(frml, sch)
 
    return reduce(hcat, modelcols(vFrmlTerms, df))
end


function design_matrix(frml, df::DataFrame, cntrst::Vector)
    cntrstDict = Dict{Symbol, AbstractContrasts}()
    for cntrstTuple in cntrst
        fun = cntrstTuple[length(cntrstTuple)]
        for i in 1:length(cntrstTuple)-1
            cntrstDict[cntrstTuple[i]] = fun
        end
    end    
    return design_matrix(frml, df, cntrstDict)
end

function design_matrix(frml, df::DataFrame)
    sch = schema(frml, df)
    vFrmlTerms = apply_schema(frml, sch)
 
    return reduce(hcat, modelcols(vFrmlTerms, df))
end


"""
    design_matrix_names(frml, df,cntrst::Dict{Symbol, AbstractContrasts})

    Returns the columns names of the design matrix based on the formula terms and the data source.

    # Arguments 

    - `frml`: formula terms generated by the macro `@mlmformula`
    - `df`: dataframe containing the data source table
    - `cntrst`: dictionnary describing encoding method for categorical or ordinal variables, based on `StatsModels.jl`

---
    design_matrix_names(frml, df::DataFrame, cntrst::Vector)

    Returns the design matrix based on the formula terms and the data source.

    # Arguments 

    - `frml`: formula terms generated by the macro `@mlmformula`
    - `df`: dataframe containing the data source table
    - `cntrst`: A vector containing tuples of variable names and corresponding  encoding function.

---
    design_matrix_names(frml, df::DataFrame)

    Returns the columns names of the design matrix based on the formula terms and the data source, where
    all the categorical variables are dummy coded.

    # Arguments 

    - `frml`: formula terms generated by the macro `@mlmformula`
    - `df`: dataframe containing the data source table

"""
function design_matrix_names(frml, df::DataFrame, cntrst::Dict)
    sch = schema(frml, df, cntrst)
    vFrmlNames = apply_schema(frml, sch)
 
    return coefnames(vFrmlNames)
end

function design_matrix_names(frml, df::DataFrame, cntrst::Vector)
    cntrstDict = Dict{Symbol, AbstractContrasts}()
    for cntrstTuple in cntrst
        fun = cntrstTuple[length(cntrstTuple)]
        for i in 1:length(cntrstTuple)-1
            cntrstDict[cntrstTuple[i]] = fun
        end
    end    
    return design_matrix_names(frml, df, cntrstDict)
end

function design_matrix_names(frml, df::DataFrame)
    sch = schema(frml, df)
    vFrmlNames = apply_schema(frml, sch)
 
    return coefnames(vFrmlNames)
end